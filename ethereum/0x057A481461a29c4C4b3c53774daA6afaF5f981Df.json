{
  "address": "0x057A481461a29c4C4b3c53774daA6afaF5f981Df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmountOut",
          "type": "uint256"
        }
      ],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmountOut",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmountOut",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd6e8c99d55d93163771645ea70aca689b1e63175fc9d3d96a25185b43181806",
  "receipt": {
    "to": null,
    "from": "0x526D542FFBAe26D510cD610b8050438586fd203C",
    "contractAddress": "0x057A481461a29c4C4b3c53774daA6afaF5f981Df",
    "transactionIndex": 7,
    "gasUsed": "536658",
    "logsBloom": "0x
    "blockHash": "0x31c766b7c48de35a73ca147dbd35b42e7d7cb1622e85c22ff1ee6b09e74afefb",
    "transactionHash": "0xfd6e8c99d55d93163771645ea70aca689b1e63175fc9d3d96a25185b43181806",
    "logs": [],
    "blockNumber": 14265536,
    "cumulativeGasUsed": "2628994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdA816459F1AB5631232FE5e97a05BBBb94970c95",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F"
  ],
  "solcInputHash": "60411fa1bdf33562804d9d99b5fdd659",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"SlippageExceeded(uint256,uint256)\":[{\"params\":{\"amount\":\"The amount of underlying or yield tokens returned by the operation.\",\"minimumAmountOut\":\"The minimum amount of the underlying or yield token that was expected when performing                         the operation.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"minimumAmountOut\":\"The minimum amount of underlying tokens that are acceptable coming out from the                         operation.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"minimumAmountOut\":\"The minimum amount of yield tokens that are acceptable coming out from the operation.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}}},\"title\":\"YearnTokenAdapter\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState()\":[{\"notice\":\"An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from.\"}],\"SlippageExceeded(uint256,uint256)\":[{\"notice\":\"An error which is used to indicate that the slippage of a wrap or unwrap operation was exceeded.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address,uint256)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"wrap(uint256,address,uint256)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/yearn/YearnTokenAdapter.sol\":\"YearnTokenAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/yearn/YearnTokenAdapter.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport {IllegalState} from \\\"../../base/Errors.sol\\\";\\n\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../../interfaces/external/yearn/IYearnVaultV2.sol\\\";\\n\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\n\\n/// @title  YearnTokenAdapter\\n/// @author Alchemix Finance\\ncontract YearnTokenAdapter is ITokenAdapter {\\n    uint256 private constant MAXIMUM_SLIPPAGE = 10000;\\n\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n\\n    constructor(address _token, address _underlyingToken) {\\n        token = _token;\\n        underlyingToken = _underlyingToken;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return IYearnVaultV2(token).pricePerShare();\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient, uint256 minimumAmountOut) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, token, amount);\\n\\n        uint256 shares = IYearnVaultV2(token).deposit(amount, recipient);\\n        if (shares < minimumAmountOut) {\\n            revert SlippageExceeded(shares, minimumAmountOut);\\n        }\\n\\n        return shares;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient, uint256 minimumAmountOut) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(token, address(this));\\n\\n        uint256 amountWithdrawn = IYearnVaultV2(token).withdraw(amount, recipient, MAXIMUM_SLIPPAGE);\\n        if (amountWithdrawn < minimumAmountOut) {\\n            revert SlippageExceeded(amountWithdrawn, minimumAmountOut);\\n        }\\n\\n        uint256 balanceAfter = TokenUtils.safeBalanceOf(token, address(this));\\n\\n        // If the Yearn vault did not burn all of the shares then revert. This is critical in mathematical operations\\n        // performed by the system because the system always expects that all of the tokens were unwrapped. In Yearn,\\n        // this sometimes does not happen in cases where strategies cannot withdraw all of the requested tokens (an\\n        // example strategy where this can occur is with Compound and AAVE where funds may not be accessible because\\n        // they were lent out).\\n        if (balanceBefore - balanceAfter != amount) {\\n            revert IllegalState();\\n        }\\n\\n        return amountWithdrawn;\\n    }\\n}\",\"keccak256\":\"0x650394061e325e56997269083a3225e31b2da8d17737cb7a1f21e2d2f8930f18\"},\"contracts/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0xfd0aef24fe5a6c5c65d3532dd67c99a8f6b450de3fa6cd6b38c542928105652a\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20Minimal {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x262ab3be86a306ee107ffda823417341f86ea8fba5acdc79fd3d23f8b177354a\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Minimal\\n/// @author Alchemix Finance\\ninterface IERC20Minimal {\\n    /// @notice An event which is emitted when tokens are transferred between two parties.\\n    ///\\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\\n    /// @param amount    The amount of tokens which were transferred.\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice An event which is emitted when an approval is made.\\n    ///\\n    /// @param owner   The address which made the approval.\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Gets the current total supply of tokens.\\n    ///\\n    /// @return The total supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Gets the balance of tokens that an account holds.\\n    ///\\n    /// @param account The account address.\\n    ///\\n    /// @return The balance of the account.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Gets the allowance that an owner has allotted for a spender.\\n    ///\\n    /// @param owner   The owner address.\\n    /// @param spender The spender address.\\n    ///\\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    ///\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param recipient The address which will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    ///\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    ///\\n    /// @return If the approval was successful.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param owner     The address to transfer tokens from.\\n    /// @param recipient The address that will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x51fd0df2a5ad7f05d49b23a5672ea911d69b660d9653af87bb8ec7cdaf7780cb\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20Minimal {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    ///\\n    /// @return If minting the tokens was successful.\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xba3abc2b29d6241f08d999b052cc200f202c89c897c87277692c05220cc6ee95\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice An error which is used to indicate that the slippage of a wrap or unwrap operation was exceeded.\\n    ///\\n    /// @param amount           The amount of underlying or yield tokens returned by the operation.\\n    /// @param minimumAmountOut The minimum amount of the underlying or yield token that was expected when performing\\n    ///                         the operation.\\n    error SlippageExceeded(uint256 amount, uint256 minimumAmountOut);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount           The amount of the underlying token to wrap.\\n    /// @param recipient        The address which will receive the yield tokens.\\n    /// @param minimumAmountOut The minimum amount of yield tokens that are acceptable coming out from the operation.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient, uint256 minimumAmountOut)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount           The amount of yield-tokens to redeem.\\n    /// @param recipient        The recipient of the resulting underlying-tokens.\\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are acceptable coming out from the\\n    ///                         operation.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient, uint256 minimumAmountOut)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x26b256c4d0e4b70a6beb35deb9281a7370800b60b606b46fc4c067434256d47c\"},\"contracts/interfaces/external/yearn/IYearnVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../IERC20Minimal.sol\\\";\\nimport \\\"../../IERC20Metadata.sol\\\";\\n\\n/// @title  IYearnVaultV2\\n/// @author Yearn Finance\\ninterface IYearnVaultV2 is IERC20Minimal, IERC20Metadata {\\n  struct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n    bool enforceChangeLimit;\\n    uint256 profitLimitRatio;\\n    uint256 lossLimitRatio;\\n    address customCheck;\\n  }\\n\\n  function apiVersion() external pure returns (string memory);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function deposit() external returns (uint256);\\n\\n  function deposit(uint256 amount) external returns (uint256);\\n\\n  function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function withdraw() external returns (uint256);\\n\\n  function withdraw(uint256 maxShares) external returns (uint256);\\n\\n  function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 maxShares,\\n    address recipient,\\n    uint256 maxLoss\\n  ) external returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n  function pricePerShare() external view returns (uint256);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function depositLimit() external view returns (uint256);\\n\\n  function maxAvailableShares() external view returns (uint256);\\n\\n  /// @notice View how much the Vault would increase this Strategy's borrow limit, based on its present performance\\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function creditAvailable() external view returns (uint256);\\n\\n  /// @notice View how much the Vault would like to pull back from the Strategy, based on its present performance\\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function debtOutstanding() external view returns (uint256);\\n\\n  /// @notice View how much the Vault expect this Strategy to return at the current block, based on its present\\n  ///         performance (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function expectedReturn() external view returns (uint256);\\n\\n  /// @notice This is the main contact point where the Strategy interacts with the Vault. It is critical that this call\\n  ///         is handled as intended by the Strategy. Therefore, this function will be called by BaseStrategy to make\\n  ///         sure the integration is correct.\\n  function report(\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment\\n  ) external returns (uint256);\\n\\n  /// @notice This function should only be used in the scenario where the Strategy is being retired but no migration of\\n  ///         the positions are possible, or in the extreme scenario that the Strategy needs to be put into\\n  ///         \\\"Emergency Exit\\\" mode in order for it to exit as quickly as possible. The latter scenario could be for any\\n  ///         reason that is considered \\\"critical\\\" that the Strategy exits its position as fast as possible, such as a\\n  ///         sudden change in market conditions leading to losses, or an imminent failure in an external dependency.\\n  function revokeStrategy() external;\\n\\n  /// @notice View the governance address of the Vault to assert privileged functions can only be called by governance.\\n  ///         The Strategy serves the Vault, so it is subject to governance defined by the Vault.\\n  function governance() external view returns (address);\\n\\n  /// @notice View the management address of the Vault to assert privileged functions can only be called by management.\\n  ///         The Strategy serves the Vault, so it is subject to management defined by the Vault.\\n  function management() external view returns (address);\\n\\n  /// @notice View the guardian address of the Vault to assert privileged functions can only be called by guardian. The\\n  ///         Strategy serves the Vault, so it is subject to guardian defined by the Vault.\\n  function guardian() external view returns (address);\\n}\\n\",\"keccak256\":\"0x29daebeed2916f52e073acfbb13206cc4076ec5b78252209422d6307c3021f9d\",\"license\":\"MIT\"},\"contracts/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x8c2deb72f89b365058a2ca22965f11e035a73bfcd0c3937c9a5c87c0617fcebf\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516109b43803806109b483398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516108bd6100f760003960008181606101528181610321015261034d01526000818160e10152818161010a015281816101380152818161019101528181610237015281816102950152818161036e01526103bc01526108bd6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632495a5991461005c5780633f069a43146100a0578063a035b1fe146100c1578063d01ab8ee146100c9578063fc0c546a146100dc575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b36100ae366004610745565b610103565b604051908152602001610097565b6100b3610291565b6100b36100d7366004610745565b61031a565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b60006101317f0000000000000000000000000000000000000000000000000000000000000000333087610460565b600061015d7f000000000000000000000000000000000000000000000000000000000000000030610560565b604051631cc6d2f960e31b8152600481018790526001600160a01b03868116602483015261271060448301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e63697c8906064016020604051808303816000875af11580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610789565b905083811015610230576040516371c4efed60e01b815260048101829052602481018590526044015b60405180910390fd5b600061025c7f000000000000000000000000000000000000000000000000000000000000000030610560565b90508661026982856107a2565b1461028757604051634a613c4160e01b815260040160405180910390fd5b5095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610789565b905090565b60006103487f0000000000000000000000000000000000000000000000000000000000000000333087610460565b6103937f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008661064e565b604051636e553f6560e01b8152600481018590526001600160a01b0384811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636e553f65906044016020604051808303816000875af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190610789565b905082811015610458576040516371c4efed60e01b81526004810182905260248101849052604401610227565b949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916104c491906107f7565b6000604051808303816000865af19150503d8060008114610501576040519150601f19603f3d011682016040523d82523d6000602084013e610506565b606091505b509150915081158061053457508051158015906105345750808060200190518101906105329190610813565b155b156105585785828260405163e7e40b5b60e01b81526004016102279392919061083c565b505050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916105ba91906107f7565b600060405180830381855afa9150503d80600081146105f5576040519150601f19603f3d011682016040523d82523d6000602084013e6105fa565b606091505b509150915081158061060d575060208151105b156106315784828260405163e7e40b5b60e01b81526004016102279392919061083c565b808060200190518101906106459190610789565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916106aa91906107f7565b6000604051808303816000865af19150503d80600081146106e7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ec565b606091505b509150915081158061071a575080511580159061071a5750808060200190518101906107189190610813565b155b1561073e5784828260405163e7e40b5b60e01b81526004016102279392919061083c565b5050505050565b60008060006060848603121561075a57600080fd5b8335925060208401356001600160a01b038116811461077857600080fd5b929592945050506040919091013590565b60006020828403121561079b57600080fd5b5051919050565b6000828210156107c257634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156107e25781810151838201526020016107ca565b838111156107f1576000848401525b50505050565b600082516108098184602087016107c7565b9190910192915050565b60006020828403121561082557600080fd5b8151801515811461083557600080fd5b9392505050565b60018060a01b0384168152821515602082015260606040820152600082518060608401526108718160808501602087016107c7565b601f01601f19169190910160800194935050505056fea2646970667358221220cf783ddc6ede064892f43e364a15d6bcfa3458368b6cccc6ebb41e84825eace864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80632495a5991461005c5780633f069a43146100a0578063a035b1fe146100c1578063d01ab8ee146100c9578063fc0c546a146100dc575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b36100ae366004610745565b610103565b604051908152602001610097565b6100b3610291565b6100b36100d7366004610745565b61031a565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b60006101317f0000000000000000000000000000000000000000000000000000000000000000333087610460565b600061015d7f000000000000000000000000000000000000000000000000000000000000000030610560565b604051631cc6d2f960e31b8152600481018790526001600160a01b03868116602483015261271060448301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e63697c8906064016020604051808303816000875af11580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610789565b905083811015610230576040516371c4efed60e01b815260048101829052602481018590526044015b60405180910390fd5b600061025c7f000000000000000000000000000000000000000000000000000000000000000030610560565b90508661026982856107a2565b1461028757604051634a613c4160e01b815260040160405180910390fd5b5095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610789565b905090565b60006103487f0000000000000000000000000000000000000000000000000000000000000000333087610460565b6103937f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008661064e565b604051636e553f6560e01b8152600481018590526001600160a01b0384811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636e553f65906044016020604051808303816000875af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190610789565b905082811015610458576040516371c4efed60e01b81526004810182905260248101849052604401610227565b949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916104c491906107f7565b6000604051808303816000865af19150503d8060008114610501576040519150601f19603f3d011682016040523d82523d6000602084013e610506565b606091505b509150915081158061053457508051158015906105345750808060200190518101906105329190610813565b155b156105585785828260405163e7e40b5b60e01b81526004016102279392919061083c565b505050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916105ba91906107f7565b600060405180830381855afa9150503d80600081146105f5576040519150601f19603f3d011682016040523d82523d6000602084013e6105fa565b606091505b509150915081158061060d575060208151105b156106315784828260405163e7e40b5b60e01b81526004016102279392919061083c565b808060200190518101906106459190610789565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916106aa91906107f7565b6000604051808303816000865af19150503d80600081146106e7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ec565b606091505b509150915081158061071a575080511580159061071a5750808060200190518101906107189190610813565b155b1561073e5784828260405163e7e40b5b60e01b81526004016102279392919061083c565b5050505050565b60008060006060848603121561075a57600080fd5b8335925060208401356001600160a01b038116811461077857600080fd5b929592945050506040919091013590565b60006020828403121561079b57600080fd5b5051919050565b6000828210156107c257634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156107e25781810151838201526020016107ca565b838111156107f1576000848401525b50505050565b600082516108098184602087016107c7565b9190910192915050565b60006020828403121561082557600080fd5b8151801515811461083557600080fd5b9392505050565b60018060a01b0384168152821515602082015260606040820152600082518060608401526108718160808501602087016107c7565b601f01601f19169190910160800194935050505056fea2646970667358221220cf783ddc6ede064892f43e364a15d6bcfa3458368b6cccc6ebb41e84825eace864736f6c634300080b0033",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "SlippageExceeded(uint256,uint256)": [
        {
          "params": {
            "amount": "The amount of underlying or yield tokens returned by the operation.",
            "minimumAmountOut": "The minimum amount of the underlying or yield token that was expected when performing                         the operation."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address,uint256)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "minimumAmountOut": "The minimum amount of underlying tokens that are acceptable coming out from the                         operation.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address,uint256)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "minimumAmountOut": "The minimum amount of yield tokens that are acceptable coming out from the operation.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      }
    },
    "title": "YearnTokenAdapter",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState()": [
        {
          "notice": "An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from."
        }
      ],
      "SlippageExceeded(uint256,uint256)": [
        {
          "notice": "An error which is used to indicate that the slippage of a wrap or unwrap operation was exceeded."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address,uint256)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "wrap(uint256,address,uint256)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}