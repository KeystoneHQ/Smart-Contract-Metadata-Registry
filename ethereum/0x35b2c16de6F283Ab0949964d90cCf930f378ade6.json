{
  "address": "0x35b2c16de6F283Ab0949964d90cCf930f378ade6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WhitelistDisabled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4809b875a0246e8e260077f0fd52156bd57e9bfc0717739cf26f5850067ac7b1",
  "receipt": {
    "to": null,
    "from": "0x526D542FFBAe26D510cD610b8050438586fd203C",
    "contractAddress": "0x35b2c16de6F283Ab0949964d90cCf930f378ade6",
    "transactionIndex": 2,
    "gasUsed": "501203",
    "logsBloom": "0x00000020000000000000000000000000000000000000000000800000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000100002000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe645ca98630f4e1572c5607d05231d596202ed1e6b359bba2ad1c9294b9feaae",
    "transactionHash": "0x4809b875a0246e8e260077f0fd52156bd57e9bfc0717739cf26f5850067ac7b1",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14266095,
        "transactionHash": "0x4809b875a0246e8e260077f0fd52156bd57e9bfc0717739cf26f5850067ac7b1",
        "address": "0x35b2c16de6F283Ab0949964d90cCf930f378ade6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000526d542ffbae26d510cd610b8050438586fd203c"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xe645ca98630f4e1572c5607d05231d596202ed1e6b359bba2ad1c9294b9feaae"
      }
    ],
    "blockNumber": 14266095,
    "cumulativeGasUsed": "629793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "60411fa1bdf33562804d9d99b5fdd659",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WhitelistDisabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"kind\":\"dev\",\"methods\":{\"add(address)\":{\"details\":\"Adds an contract to the whitelist.\",\"params\":{\"caller\":\"The address to add to the whitelist.\"}},\"disable()\":{\"details\":\"Disables the whitelist of the target whitelisted contract. This can only occur once. Once the whitelist is disabled, then it cannot be reenabled.\"},\"getAddresses()\":{\"details\":\"Returns the list of addresses that are whitelisted for the given contract address.\",\"returns\":{\"_0\":\"The addresses that are whitelisted to interact with the given contract.\"}},\"isWhitelisted(address)\":{\"details\":\"Checks that the `msg.sender` is whitelisted when it is not an EOA.\",\"params\":{\"account\":\"The account to check.\"},\"returns\":{\"_0\":\"whitelisted A flag denoting if the given account is whitelisted.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(address)\":{\"details\":\"Adds a contract to the whitelist.\",\"params\":{\"caller\":\"The address to remove from the whitelist.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"disabled\":{\"details\":\"Returns the disabled status of a given whitelist.\",\"return\":\"disabled A flag denoting if the given whitelist is disabled.\",\"returns\":{\"_0\":\"disabled A flag denoting if the given whitelist is disabled.\"}}},\"title\":\"Whitelist\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalState()\":[{\"notice\":\"An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from.\"}],\"Unauthorized()\":[{\"notice\":\"An error used to indicate that an action could not be completed because either the `msg.sender` or         `msg.origin` is not authorized.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0xfd0aef24fe5a6c5c65d3532dd67c99a8f6b450de3fa6cd6b38c542928105652a\"},\"contracts/interfaces/IWhitelist.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../base/Errors.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/Sets.sol\\\";\\n\\n/// @title  Whitelist\\n/// @author Alchemix Finance\\ninterface IWhitelist {\\n  /// @dev Emitted when a contract is added to the whitelist.\\n  ///\\n  /// @param account The account that was added to the whitelist.\\n  event AccountAdded(address account);\\n\\n  /// @dev Emitted when a contract is removed from the whitelist.\\n  ///\\n  /// @param account The account that was removed from the whitelist.\\n  event AccountRemoved(address account);\\n\\n  /// @dev Emitted when the whitelist is deactivated.\\n  event WhitelistDisabled();\\n\\n  /// @dev Returns the list of addresses that are whitelisted for the given contract address.\\n  ///\\n  /// @return addresses The addresses that are whitelisted to interact with the given contract.\\n  function getAddresses() external view returns (address[] memory addresses);\\n\\n  /// @dev Returns the disabled status of a given whitelist.\\n  ///\\n  /// @return disabled A flag denoting if the given whitelist is disabled.\\n  function disabled() external view returns (bool);\\n\\n  /// @dev Adds an contract to the whitelist.\\n  ///\\n  /// @param caller The address to add to the whitelist.\\n  function add(address caller) external;\\n\\n  /// @dev Adds a contract to the whitelist.\\n  ///\\n  /// @param caller The address to remove from the whitelist.\\n  function remove(address caller) external;\\n\\n  /// @dev Disables the whitelist of the target whitelisted contract.\\n  ///\\n  /// This can only occur once. Once the whitelist is disabled, then it cannot be reenabled.\\n  function disable() external;\\n\\n  /// @dev Checks that the `msg.sender` is whitelisted when it is not an EOA.\\n  ///\\n  /// @param account The account to check.\\n  ///\\n  /// @return whitelisted A flag denoting if the given account is whitelisted.\\n  function isWhitelisted(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x94cf671fe23e90433e28d0994672984f136eb9d259ffa8eb62986c1a79922004\"},\"contracts/libraries/Sets.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\n/// @title  Sets\\n/// @author Alchemix Finance\\nlibrary Sets {\\n    using Sets for AddressSet;\\n\\n    /// @notice A data structure holding an array of values with an index mapping for O(1) lookup.\\n    struct AddressSet {\\n        address[] values;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    /// @dev Add a value to a Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to add.\\n    ///\\n    /// @return Whether the operation was successful (unsuccessful if the value is already contained in the Set)\\n    function add(AddressSet storage self, address value) internal returns (bool) {\\n        if (self.contains(value)) {\\n            return false;\\n        }\\n        self.values.push(value);\\n        self.indexes[value] = self.values.length;\\n        return true;\\n    }\\n\\n    /// @dev Remove a value from a Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to remove.\\n    ///\\n    /// @return Whether the operation was successful (unsuccessful if the value was not contained in the Set)\\n    function remove(AddressSet storage self, address value) internal returns (bool) {\\n        uint256 index = self.indexes[value];\\n        if (index == 0) {\\n            return false;\\n        }\\n\\n        // Normalize the index since we know that the element is in the set.\\n        index--;\\n\\n        uint256 lastIndex = self.values.length - 1;\\n\\n        if (index != lastIndex) {\\n            address lastValue = self.values[lastIndex];\\n            self.values[index] = lastValue;\\n            self.indexes[lastValue] = index + 1;\\n        }\\n\\n        self.values.pop();\\n\\n        delete self.indexes[value];\\n\\n        return true;\\n    }\\n\\n    /// @dev Returns true if the value exists in the Set\\n    ///\\n    /// @param self  The Set.\\n    /// @param value The value to check.\\n    ///\\n    /// @return True if the value is contained in the Set, False if it is not.\\n    function contains(AddressSet storage self, address value) internal view returns (bool) {\\n        return self.indexes[value] != 0;\\n    }\\n}\",\"keccak256\":\"0x8f2dca992ddea0e1cac22230413ae1a1704d4ecc8c9a0a40906c1a5d040b76f0\"},\"contracts/utils/Whitelist.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../base/Errors.sol\\\";\\nimport \\\"../interfaces/IWhitelist.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/Sets.sol\\\";\\n\\n/// @title  Whitelist\\n/// @author Alchemix Finance\\ncontract Whitelist is IWhitelist, Ownable {\\n  using Sets for Sets.AddressSet;\\n  Sets.AddressSet addresses;\\n\\n  /// @inheritdoc IWhitelist\\n  bool public override disabled;\\n\\n  constructor() Ownable() {}\\n\\n  /// @inheritdoc IWhitelist\\n  function getAddresses() external view returns (address[] memory) {\\n    return addresses.values;\\n  }\\n\\n  /// @inheritdoc IWhitelist\\n  function add(address caller) external override {\\n    _onlyAdmin();\\n    if (disabled) {\\n      revert IllegalState();\\n    }\\n    addresses.add(caller);\\n    emit AccountAdded(caller);\\n  }\\n\\n  /// @inheritdoc IWhitelist\\n  function remove(address caller) external override {\\n    _onlyAdmin();\\n    if (disabled) {\\n      revert IllegalState();\\n    }\\n    addresses.remove(caller);\\n    emit AccountRemoved(caller);\\n  }\\n\\n  /// @inheritdoc IWhitelist\\n  function disable() external override {\\n    _onlyAdmin();\\n    disabled = true;\\n    emit WhitelistDisabled();\\n  }\\n\\n  /// @inheritdoc IWhitelist\\n  function isWhitelisted(address account) external view override returns (bool) {\\n    return disabled || addresses.contains(account);\\n  }\\n\\n  /// @dev Reverts if the caller is not the contract owner.\\n  function _onlyAdmin() internal view {\\n    if (msg.sender != owner()) {\\n      revert Unauthorized();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5eca31a42e2d3bad95a1748e21955190f1d6f319ed5d013ebb6de0b9a4213351\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107a68061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146100f05780638da5cb5b146100f8578063a39fac1214610113578063ee07080514610128578063f2fde38b1461013557600080fd5b80630a3b0a4f1461009857806329092d0e146100ad5780632f2770db146100c05780633af32abf146100c8575b600080fd5b6100ab6100a636600461066b565b610148565b005b6100ab6100bb36600461066b565b6101c0565b6100ab610231565b6100db6100d636600461066b565b610271565b60405190151581526020015b60405180910390f35b6100ab6102a2565b6000546040516001600160a01b0390911681526020016100e7565b61011b61030d565b6040516100e7919061069b565b6003546100db9060ff1681565b6100ab61014336600461066b565b610372565b61015061043d565b60035460ff161561017457604051634a613c4160e01b815260040160405180910390fd5b61017f600182610467565b506040516001600160a01b03821681527f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce0399906020015b60405180910390a150565b6101c861043d565b60035460ff16156101ec57604051634a613c4160e01b815260040160405180910390fd5b6101f76001826104d7565b506040516001600160a01b03821681527fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a7906020016101b5565b61023961043d565b6003805460ff191660011790556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b60035460009060ff168061029c57506001600160a01b03821660009081526002602052604090205415155b92915050565b6000546001600160a01b031633146103015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61030b600061061b565b565b6060600160000180548060200260200160405190810160405280929190818152602001828054801561036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161034a575b5050505050905090565b6000546001600160a01b031633146103cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f8565b6001600160a01b0381166104315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f8565b61043a8161061b565b50565b6000546001600160a01b0316331461030b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811660009081526001830160205260408120541561048f5750600061029c565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6001600160a01b03811660009081526001830160205260408120548061050157600091505061029c565b8061050b816106fe565b85549092506000915061052090600190610715565b90508082146105c05760008560000182815481106105405761054061072c565b60009182526020909120015486546001600160a01b039091169150819087908590811061056f5761056f61072c565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556105a3836001610742565b6001600160a01b0390911660009081526001870160205260409020555b84548590806105d1576105d161075a565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561067d57600080fd5b81356001600160a01b038116811461069457600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156106dc5783516001600160a01b0316835292840192918401916001016106b7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008161070d5761070d6106e8565b506000190190565b600082821015610727576107276106e8565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610755576107556106e8565b500190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209c7d4a9dcae7a3fe3bcd743decc1a157c7f604b9621ef371e0dae5f74640dd6964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146100f05780638da5cb5b146100f8578063a39fac1214610113578063ee07080514610128578063f2fde38b1461013557600080fd5b80630a3b0a4f1461009857806329092d0e146100ad5780632f2770db146100c05780633af32abf146100c8575b600080fd5b6100ab6100a636600461066b565b610148565b005b6100ab6100bb36600461066b565b6101c0565b6100ab610231565b6100db6100d636600461066b565b610271565b60405190151581526020015b60405180910390f35b6100ab6102a2565b6000546040516001600160a01b0390911681526020016100e7565b61011b61030d565b6040516100e7919061069b565b6003546100db9060ff1681565b6100ab61014336600461066b565b610372565b61015061043d565b60035460ff161561017457604051634a613c4160e01b815260040160405180910390fd5b61017f600182610467565b506040516001600160a01b03821681527f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce0399906020015b60405180910390a150565b6101c861043d565b60035460ff16156101ec57604051634a613c4160e01b815260040160405180910390fd5b6101f76001826104d7565b506040516001600160a01b03821681527fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a7906020016101b5565b61023961043d565b6003805460ff191660011790556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b60035460009060ff168061029c57506001600160a01b03821660009081526002602052604090205415155b92915050565b6000546001600160a01b031633146103015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61030b600061061b565b565b6060600160000180548060200260200160405190810160405280929190818152602001828054801561036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161034a575b5050505050905090565b6000546001600160a01b031633146103cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f8565b6001600160a01b0381166104315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f8565b61043a8161061b565b50565b6000546001600160a01b0316331461030b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811660009081526001830160205260408120541561048f5750600061029c565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6001600160a01b03811660009081526001830160205260408120548061050157600091505061029c565b8061050b816106fe565b85549092506000915061052090600190610715565b90508082146105c05760008560000182815481106105405761054061072c565b60009182526020909120015486546001600160a01b039091169150819087908590811061056f5761056f61072c565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556105a3836001610742565b6001600160a01b0390911660009081526001870160205260409020555b84548590806105d1576105d161075a565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561067d57600080fd5b81356001600160a01b038116811461069457600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156106dc5783516001600160a01b0316835292840192918401916001016106b7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008161070d5761070d6106e8565b506000190190565b600082821015610727576107276106e8565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610755576107556106e8565b500190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209c7d4a9dcae7a3fe3bcd743decc1a157c7f604b9621ef371e0dae5f74640dd6964736f6c634300080b0033",
  "devdoc": {
    "author": "Alchemix Finance",
    "kind": "dev",
    "methods": {
      "add(address)": {
        "details": "Adds an contract to the whitelist.",
        "params": {
          "caller": "The address to add to the whitelist."
        }
      },
      "disable()": {
        "details": "Disables the whitelist of the target whitelisted contract. This can only occur once. Once the whitelist is disabled, then it cannot be reenabled."
      },
      "getAddresses()": {
        "details": "Returns the list of addresses that are whitelisted for the given contract address.",
        "returns": {
          "_0": "The addresses that are whitelisted to interact with the given contract."
        }
      },
      "isWhitelisted(address)": {
        "details": "Checks that the `msg.sender` is whitelisted when it is not an EOA.",
        "params": {
          "account": "The account to check."
        },
        "returns": {
          "_0": "whitelisted A flag denoting if the given account is whitelisted."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(address)": {
        "details": "Adds a contract to the whitelist.",
        "params": {
          "caller": "The address to remove from the whitelist."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "disabled": {
        "details": "Returns the disabled status of a given whitelist.",
        "return": "disabled A flag denoting if the given whitelist is disabled.",
        "returns": {
          "_0": "disabled A flag denoting if the given whitelist is disabled."
        }
      }
    },
    "title": "Whitelist",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "IllegalState()": [
        {
          "notice": "An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from."
        }
      ],
      "Unauthorized()": [
        {
          "notice": "An error used to indicate that an action could not be completed because either the `msg.sender` or         `msg.origin` is not authorized."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3129,
        "contract": "contracts/utils/Whitelist.sol:Whitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21087,
        "contract": "contracts/utils/Whitelist.sol:Whitelist",
        "label": "addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)18506_storage"
      },
      {
        "astId": 21091,
        "contract": "contracts/utils/Whitelist.sol:Whitelist",
        "label": "disabled",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)18506_storage": {
        "encoding": "inplace",
        "label": "struct Sets.AddressSet",
        "members": [
          {
            "astId": 18501,
            "contract": "contracts/utils/Whitelist.sol:Whitelist",
            "label": "values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18505,
            "contract": "contracts/utils/Whitelist.sol:Whitelist",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}